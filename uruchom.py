#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# plik: uruchom.py
# Wersja 8.0 - Dodano dedykowanƒÖ komendƒô backupu rdzenia aplikacji
# Wersja 7.0 - Rozdzielenie komend backupu na dane i projekt
#
# ##############################################################################
# ===                     G≈Å√ìWNY PLIK URUCHOMIAJƒÑCY (LAUNCHER)               ===
# ##############################################################################

# --- G≈Å√ìWNE IMPORTY ---
import os
import sys
import importlib
import argparse
import json
from pathlib import Path
import asyncio
import logging
import shutil

# --- IMPORTY Z BIBLIOTEKI `rich` ---
try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.traceback import Traceback
    from rich.prompt import Confirm
    from rich.logging import RichHandler
except ImportError:
    print("B≈ÅƒÑD KRYTYCZNY: Biblioteka 'rich' nie jest zainstalowana.")
    print("Proszƒô jƒÖ zainstalowaƒá za pomocƒÖ komendy: pip install rich")
    sys.exit(1)

# --- IMPORTY Z MODU≈Å√ìW APLIKACJI ---
try:
    from core import backup_logic
    from core.database import setup_database
except ImportError:
    print("B≈ÅƒÑD KRYTYCZNY: Nie mo≈ºna zaimportowaƒá modu≈Ç√≥w z folderu 'core'.")
    print("Upewnij siƒô, ≈ºe uruchamiasz skrypt z g≈Ç√≥wnego folderu projektu.")
    sys.exit(1)

# --- INICJALIZACJA I KONFIGURACJA MODU≈ÅU ---
console = Console(highlight=True)
PROJECT_ROOT = Path(__file__).resolve().parent
APP_DATA_DIR = PROJECT_ROOT / "app_data"
SETTINGS_FILE = APP_DATA_DIR / "settings.json"
LOG_DIR = APP_DATA_DIR / "dziennik"
APP_DATA_DIR.mkdir(exist_ok=True)
LOG_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level="INFO",
    format="%(asctime)s - [%(levelname)s] - (%(module)s) - %(message)s",
    handlers=[
        RichHandler(console=console, rich_tracebacks=True, show_path=False, markup=True),
        logging.FileHandler(LOG_DIR / "launcher.log", mode='a', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

SOURCE_DIRECTORIES = ['core']
APP_ENTRY_POINT_MODULE = 'start'
APP_ENTRY_POINT_FUNCTION = 'main'

# ##############################################################################
# ===                   SEKCJA 1: ZARZƒÑDZANIE USTAWIENIAMI                   ===
# ##############################################################################

def _read_settings() -> dict:
    if not SETTINGS_FILE.exists():
        logger.warning(f"Plik '{SETTINGS_FILE.name}' nie istnieje. Tworzƒô go z domy≈õlnymi warto≈õciami.")
        default_settings = {"LOG_ENABLED": True, "AUTO_BACKUP_ON_START": False}
        _write_settings(default_settings)
        return default_settings
    try:
        with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.critical(f"B≈ÇƒÖd odczytu pliku '{SETTINGS_FILE.name}': {e}. U≈ºywam domy≈õlnych ustawie≈Ñ.", exc_info=True)
        return {}

def _write_settings(settings: dict) -> bool:
    try:
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(settings, f, indent=4, ensure_ascii=False)
        logger.info(f"Pomy≈õlnie zaktualizowano plik ustawie≈Ñ '{SETTINGS_FILE.name}'.")
        return True
    except IOError as e:
        logger.critical(f"B≈ÇƒÖd zapisu do pliku '{SETTINGS_FILE.name}': {e}", exc_info=True)
        return False

def toggle_setting(key: str, enable: bool, title: str, on_text: str, off_text: str, color: str):
    action_text = "W≈ÇƒÖczam" if enable else "Wy≈ÇƒÖczam"
    logger.info(f"Pr√≥ba zmiany ustawienia '{key}' na '{enable}'.")
    console.print(Panel(f"[bold {color}]‚öôÔ∏è {action_text} {title} ‚öôÔ∏è[/]", border_style=color))
    settings = _read_settings()
    settings[key] = enable
    if _write_settings(settings):
        console.print(f"[green]‚úÖ {on_text}[/]" if enable else f"[green]‚úÖ {off_text}[/]")
    else:
        console.print(f"[bold red]B≈ÇƒÖd: Nie uda≈Ço siƒô zapisaƒá zmian w pliku '{SETTINGS_FILE.name}'.[/]")

def toggle_logging(enable: bool):
    toggle_setting("LOG_ENABLED", enable, "Globalne Logowanie", "Logowanie zosta≈Ço [bold]W≈ÅƒÑCZONE[/].", "Logowanie zosta≈Ço [bold]WY≈ÅƒÑCZONE[/].", "yellow")

def toggle_auto_backup(enable: bool):
    toggle_setting("AUTO_BACKUP_ON_START", enable, "Automatyczny Backup Danych", "Automatyczny backup danych przy starcie zosta≈Ç [bold]W≈ÅƒÑCZONY[/].", "Automatyczny backup danych przy starcie zosta≈Ç [bold]WY≈ÅƒÑCZONY[/].", "blue")

# ##############################################################################
# ===                   SEKCJA 2: NARZƒòDZIA PROJEKTU                         ===
# ##############################################################################

def create_project_backup():
    """Wywo≈Çuje logikƒô tworzenia kopii zapasowej KODU PROJEKTU."""
    try:
        asyncio.run(backup_logic.create_full_project_backup())
    except Exception as e:
        logger.critical(f"WystƒÖpi≈Ç b≈ÇƒÖd podczas tworzenia kopii zapasowej projektu: {e}", exc_info=True)
        console.print(f"[bold red]B≈ÇƒÖd: Nie uda≈Ço siƒô uruchomiƒá procesu tworzenia kopii zapasowej projektu.[/]")

def create_data_backup():
    """Wywo≈Çuje logikƒô tworzenia kopii zapasowej DANYCH U≈ªYTKOWNIKA."""
    try:
        asyncio.run(backup_logic.create_data_backup())
    except Exception as e:
        logger.critical(f"WystƒÖpi≈Ç b≈ÇƒÖd podczas tworzenia kopii zapasowej danych: {e}", exc_info=True)
        console.print(f"[bold red]B≈ÇƒÖd: Nie uda≈Ço siƒô uruchomiƒá procesu tworzenia kopii zapasowej danych.[/]")

def create_core_backup():
    """Wywo≈Çuje logikƒô tworzenia kopii zapasowej RDZENIA APLIKACJI."""
    try:
        asyncio.run(backup_logic.create_core_app_backup())
    except Exception as e:
        logger.critical(f"B≈ÇƒÖd podczas tworzenia kopii rdzenia aplikacji: {e}", exc_info=True)

def clean_project(confirm: bool = True):
    logger.info("Rozpoczynam proces sprzƒÖtania projektu z katalog√≥w __pycache__.")
    console.print(Panel("[bold yellow]üßπ SprzƒÖtanie Projektu üßπ[/bold yellow]", border_style="yellow"))
    pycache_dirs = list(PROJECT_ROOT.rglob('__pycache__'))
    if not pycache_dirs:
        console.print("[green]‚úÖ Projekt jest ju≈º czysty.[/green]")
        return
    if confirm and not Confirm.ask(f"[bold yellow]Znaleziono {len(pycache_dirs)} katalog√≥w __pycache__. Czy na pewno chcesz je usunƒÖƒá?[/]", default=True):
        console.print("[red]Przerwano operacjƒô.[/red]")
        return
    deleted_count = 0
    with console.status("[bold yellow]Usuwanie...[/]"):
        for d in pycache_dirs:
            try:
                shutil.rmtree(d)
                deleted_count += 1
            except OSError as e:
                logger.error(f"B≈ÇƒÖd podczas usuwania katalogu {d}: {e}", exc_info=True)
    console.print(f"\n[green]‚úÖ Usuniƒôto [bold cyan]{deleted_count}[/bold cyan] z {len(pycache_dirs)} katalog√≥w.[/green]")

# ##############################################################################
# ===                   SEKCJA 3: WERYFIKACJA I URUCHAMIANIE APLIKACJI       ===
# ##############################################################################

def verify_imports_and_dependencies():
    logger.info("Rozpoczynam weryfikacjƒô integralno≈õci modu≈Ç√≥w.")
    console.print("\n[bold]Weryfikacja integralno≈õci modu≈Ç√≥w...[/bold]")
    
    def path_to_module_name(file_path: Path) -> str:
        return str(file_path.relative_to(PROJECT_ROOT).with_suffix('')).replace(os.sep, '.')

    modules_to_check = []
    for dir_name in SOURCE_DIRECTORIES:
        for path in (PROJECT_ROOT / dir_name).rglob('*.py'):
            if path.name != '__init__.py':
                modules_to_check.append(path_to_module_name(path))
    modules_to_check.append(APP_ENTRY_POINT_MODULE)

    with console.status("[green]Sprawdzanie...[/]"):
        for module_name in modules_to_check:
            try:
                importlib.import_module(module_name)
            except Exception:
                console.print(f"\n‚ùå [bold red]B≈ÇƒÖd krytyczny podczas importu modu≈Çu:[/bold red] [cyan]{module_name}[/cyan]")
                console.print(Traceback(width=120))
                sys.exit(1)
    console.print("‚úÖ [bold green]Wszystkie modu≈Çy i zale≈ºno≈õci zweryfikowane pomy≈õlnie.[/bold green]")

def run_main_application():
    logger.info(f"Uruchamiam g≈Ç√≥wny punkt wej≈õcia: {APP_ENTRY_POINT_MODULE}.{APP_ENTRY_POINT_FUNCTION}()")
    try:
        app_module = importlib.import_module(APP_ENTRY_POINT_MODULE)
        start_function = getattr(app_module, APP_ENTRY_POINT_FUNCTION)
        asyncio.run(start_function())
    except (ImportError, AttributeError):
        logger.critical("B≈ÇƒÖd krytyczny: nie mo≈ºna znale≈∫ƒá punktu wej≈õcia aplikacji.", exc_info=True)
        console.print(f"\n[bold red]B≈ÅƒÑD KRYTYCZNY: Nie mo≈ºna uruchomiƒá aplikacji![/bold red]")
        console.print(f"Problem z punktem wej≈õcia: [cyan]{APP_ENTRY_POINT_MODULE}.{APP_ENTRY_POINT_FUNCTION}[/cyan]")
        console.print(Traceback(width=120))
        sys.exit(1)
    except KeyboardInterrupt:
        logger.warning("G≈Ç√≥wna aplikacja przerwana przez KeyboardInterrupt.")

def run_verification_and_app():
    logger.info("Rozpoczynam procedurƒô uruchomienia aplikacji ('run').")
    settings = _read_settings()
    if settings.get("AUTO_BACKUP_ON_START", False):
        logger.info("Wykonywanie automatycznej kopii zapasowej DANYCH przy starcie.")
        create_core_backup()
        create_data_backup()
    verify_imports_and_dependencies()
    run_main_application()

# ##############################################################################
# ===                   SEKCJA 4: G≈Å√ìWNY PUNKT WEJ≈öCIA I OBS≈ÅUGA KOMEND      ===
# ##############################################################################

def main():
    parser = argparse.ArgumentParser(description="Launcher dla Google Photos Toolkit.", formatter_class=argparse.RawTextHelpFormatter)
    subparsers = parser.add_subparsers(dest='command', help='Dostƒôpne komendy', required=False)

    subparsers.add_parser('run', help='Weryfikuje i uruchamia g≈Ç√≥wnƒÖ aplikacjƒô (domy≈õlna akcja).')
    subparsers.add_parser('clean', help='Usuwa wszystkie katalogi __pycache__ z projektu.')
    
    # --- POCZƒÑTEK ZMIAN ---
    subparsers.add_parser('backup-core', help='Tworzy kopiƒô zapasowƒÖ RDZENIA APLIKACJI (core, start.py, uruchom.py).')
    subparsers.add_parser('backup-project', help='Tworzy kopiƒô zapasowƒÖ KODU ≈πR√ìD≈ÅOWEGO projektu (.tar.gz).')
    subparsers.add_parser('backup-data', help='Tworzy kopiƒô zapasowƒÖ DANYCH U≈ªYTKOWNIKA (baza, sesja) (.zip).')
    # --- KONIEC ZMIAN ---

    subparsers.add_parser('backup-on', help='W≈ÇƒÖcza automatyczny backup DANYCH przy starcie.')
    subparsers.add_parser('backup-off', help='Wy≈ÇƒÖcza automatyczny backup DANYCH przy starcie.')
    subparsers.add_parser('logs-on', help='W≈ÇƒÖcza globalnie system logowania.')
    subparsers.add_parser('logs-off', help='Wy≈ÇƒÖcza globalnie system logowania.')

    args = parser.parse_args()
    command = args.command or 'run'
    logger.info(f"Otrzymano polecenie: '{command}'")

    if command != 'run':
        logger.debug("Uruchamianie wstƒôpnej inicjalizacji bazy danych...")
        asyncio.run(setup_database())

    try:
        action_map = {
            'run': run_verification_and_app,
            'clean': clean_project,
            'backup-core': create_core_backup,
            'backup-project': create_project_backup,
            'backup-data': create_data_backup,
            'logs-on': lambda: toggle_logging(True),
            'logs-off': lambda: toggle_logging(False),
            'backup-on': lambda: toggle_auto_backup(True),
            'backup-off': lambda: toggle_auto_backup(False),
        }
        if command in action_map:
            action_map[command]()
    except KeyboardInterrupt:
        console.print("\n[bold yellow]Przerwano przez u≈ºytkownika.[/bold yellow]")
        logger.warning("Launcher przerwany przez KeyboardInterrupt.")
        sys.exit(0)
    finally:
        if command == 'run':
            logger.info("Aplikacja zako≈Ñczy≈Ça dzia≈Çanie. Rozpoczynam automatyczne sprzƒÖtanie.")
            clean_project(confirm=False)

if __name__ == "__main__":
    main()
